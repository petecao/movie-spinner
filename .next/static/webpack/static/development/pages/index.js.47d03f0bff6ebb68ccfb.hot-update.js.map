{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.47d03f0bff6ebb68ccfb.hot-update.js","sources":["webpack:///./components/TextBox.js"],"sourcesContent":["\r\nconst sleep = (milliseconds) => {\r\n  return new Promise(resolve => setTimeout(resolve, milliseconds))\r\n}\r\n\r\nconst buttonStyle = {\r\n  backgroundColor: \"rgb(255, 87, 51)\", \r\n  border: \"none\",\r\n  color: \"white\",\r\n  padding: \"15px 32px\",\r\n  textAlign: \"center\",\r\n  textDecoration: \"none\",\r\n  display: \"inline-block\",\r\n  fontSize: \"16px\"\r\n}\r\n\r\nclass TextBox extends React.Component {\r\n    wheelSpun = false;\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {count: '', movies: [], chosenMovie: \"\", movie: \"\", imgsrc: \"\"};\r\n        \r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.spinWheel = this.spinWheel.bind(this);\r\n        this.clear = this.clear.bind(this);\r\n      }\r\n\r\n      \r\n    handleChange(event) {\r\n        this.setState({count: event.target.value});\r\n      }\r\n\r\n    handleSubmit(event) {\r\n        this.setState({movies: [ ...this.state.movies, this.state.count + \" \"]});\r\n        //this.setState({movie: \"Successfuly entered {this.state.count} !\"});\r\n        event.preventDefault();\r\n    }\r\n    \r\n    spinWheel() {\r\n      if(this.state.movies.length > 0 && !this.wheelSpun) {\r\n        //console.log(this.state.movies[Math.floor(Math.random()*this.state.movies.length)]);\r\n        var randMovie = this.state.movies[Math.floor(Math.random()*this.state.movies.length)];\r\n        this.setState({chosenMovie: randMovie});\r\n\r\n        var xmlHttp = new XMLHttpRequest();\r\n\r\n        xmlHttp.open(\"GET\", \"https://api.themoviedb.org/3/search/movie?api_key=15d2ea6d0dc1d476efbca3eba2b9bbfb&query=\" + randMovie + \"&callback=?\", false ); // false for synchronous request\r\n        xmlHttp.send( null );\r\n\r\n        var JSONString = xmlHttp.responseText;\r\n        console.log(JSONString);\r\n        var movieJSON = JSON.parse(JSONString);\r\n\r\n\r\n        this.setState({imgsrc: \"http://image.tmdb.org/t/p/w500/\" + r.results[0].poster_path +  \"class=img-responsive\"});\r\n        \r\n        \r\n        this.wheelSpun = true;\r\n      }\r\n    }  \r\n\r\n    clear() {\r\n      this.setState({movies: []});\r\n      this.setState({chosenMovie: \"\"});\r\n      this.wheelSpun = false;\r\n    }\r\n\r\n      render() {\r\n        return (\r\n            <div>\r\n            \r\n          <form onSubmit={this.handleSubmit} style = {{fontSize: \"3em\", textAlign: \"center\"}}>\r\n             Type in a movie: <input placeholder = \"\" type=\"text\" name=\"movieChoice\" onChange = {this.handleChange} ></input>\r\n             <input type=\"submit\" value=\"Submit\" />\r\n          </form>\r\n            \r\n            <ol style = {{textAlign: \"center\", listStylePosition: \"inside\", fontSize: \"2em\"}}>\r\n              {this.state.movies.map((movie) => {\r\n                return <li style = {{textAlign: \"center\"}}><b>{movie}</b></li>\r\n              })}  \r\n            </ol>\r\n\r\n            <button onClick={this.spinWheel} style={buttonStyle}>Spin! That! Wheel!</button>\r\n            <button onClick = {this.clear} style={buttonStyle}>Clear Choices</button>\r\n            <h1 style = {{textAlign: \"center\"}}>You will be watching: <em>{this.state.chosenMovie}</em></h1>\r\n            <img src = {this.imgsrc}></img>\r\n          </div>\r\n        ) \r\n      }\r\n    }\r\n\r\nexport default TextBox;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AAUA;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAPA;AAQA;AACA;;;AAEA;AACA;AAAA;AAAA;AACA;;;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAGA;AAAA;AAAA;AAGA;AACA;AACA;;;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;AAzEA;AACA;AA2EA;;;;A","sourceRoot":""}